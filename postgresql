pg 整理

```sql
一、日期格式转换
1.字符日期格式转化为UNIX时间戳格式
字段endtime为内容为UNIX时间戳格式，例如1346650755
select * from test where endtime >= extract(epoch FROM date('2012-09-03 00:00:00'));
2.UNIX时间戳转化为字符日期格式
select * from test where date(to_timestamp(endtime))>='2012-09-02';


-- to_timestamp 格式化日期
select date(to_timestamp(start_time)),date(to_timestamp(end_time)) from slot_18.game_log_table_info 
select date(to_timestamp(start_time)) as start_time,* from slot_18.game_log_table_info 
where  date(to_timestamp(start_time))>=  CURRENT_DATE-20 
and  date(to_timestamp(end_time)) <= CURRENT_DATE-20

-- 
select extract(epoch FROM date(CURRENT_DATE-('1 day')::INTERVAL));
select  CURRENT_DATE-20 -- 前20天
select to_timestamp('2017-10-11 00:00:00');
select extract(epoch FROM date('2017-10-11 00:00:00'));
SELECT CURRENT_DATE-13 )
-- 时间转格式化字符串
select to_char(now()- interval ' 1day','yyyymmdd');
SELECT to_date(CURRENT_DATE-13 || '00:00:00','yyyymmdd')
--SELECT replace(to_number(CURRENT_DATE-13,'99999999'),'-','')

-- 当前时间
select current_timestamp(0)::timestamp without time zone;

-- 某个时间内查索引表的数据
select date(to_timestamp(start_time)),date(to_timestamp(end_time)),*  from slot_18.game_log_table_info 
where  
     date(to_timestamp(start_time)) <= CURRENT_DATE-18  and  date(to_timestamp(end_time)) >= CURRENT_DATE-18
or ( date(to_timestamp(start_time)) <= CURRENT_DATE-18  and end_time=0)

-- 冲突替换，mysql replace insert into
id为主键
insert into public.letterbox(
            id, sender_id, receiver_id, theme, content, date, type, is_read, 
            status)
    VALUES (3, 2, 3, 4, 5, 6, 7, 8, 
            9),(4, 4, 3, 4, 5, 6, 7, 8, 
            9)
 ON CONFLICT (id) DO UPDATE SET 
 sender_id = excluded.sender_id,receiver_id=excluded.receiver_id,theme = excluded.theme,content=excluded.content,date = excluded.date,type=excluded.type,is_read = excluded.is_read,status=excluded.status


二、存储过程格式
CREATE OR REPLACE FUNCTION 函数名(参数1，[整型 int4, 整型数组 _int4, ...])  
RETURNS 返回值类型 AS  
$BODY$  
DECLARE  
变量声明  
BEGIN  
函数体  
END;  
$BODY$  
LANGUAGE ‘plpgsql’ VOLATILE;  

-- postgresql 存储过程函数：时间戳与日期字符串相互转换

--datestr_to_timestamp 
CREATE OR REPLACE FUNCTION datestr_to_timestamp(datestr VARCHAR)  
  RETURNS BIGINT AS  
$BODY$  
    --由日期字符串格式为2011-12-05 19:10:00转换成long:1323083400 * 1000  
    --由于可能会出现传入参数带秒，故这里都将秒舍去  
DECLARE  
    result BIGINT;  
BEGIN  
    result := extract(epoch FROM date_trunc('minute', to_timestamp(datestr, 'YYYY-MM-DD HH24:MI:SS')));  
    RETURN result * 1000;  
END;  
$BODY$  
  LANGUAGE 'plpgsql' VOLATILE;  
  
-- timestamp_to_datestr
CREATE OR REPLACE FUNCTION timestamp_to_datestr(date BIGINT)  
  RETURNS VARCHAR AS  
$BODY$  
    --由时间戳转换成日期字符串 参数形如：1323083400000 转换后为2011-12-05 19:10:00  
DECLARE  
    result VARCHAR;  
BEGIN  
    result := to_char(to_timestamp(date/1000), 'YYYY-MM-DD HH24:MI:SS');  
    RETURN result;  
END;  
$BODY$  
  LANGUAGE 'plpgsql' VOLATILE;  
  
调用示例：  
select datestr_to_timestamp('2011-12-05 19:10:00');  
select timestamp_to_datestr(1323083400000);  

-- yesterday_count 

CREATE OR REPLACE FUNCTION yesterday_count(datestr VARCHAR)  
  RETURNS  BIGINT AS  
$BODY$  
    -- 统计
DECLARE
    table_arr text[]; -- 分表名数组
    sql "varchar";  --  分表执行的sql语句
    --num BIGINT := 0; -- 统计的总数
    tbl "varchar"; -- 分表名
    total BIGINT;  -- 每个表的总粗线条
    day_num int4; -- 日期转字符串
    offday int4 := 13; -- 某一天
    income BIGINT :=0; -- 总收支
    bonus BIGINT :=0; -- 总奖金
    jp__contri BIGINT :=0; -- 总jp贡献    
    jp_bonus BIGINT :=0; -- 总jp奖金
BEGIN
    -- 从索引表里获取某个日期的分表名
    table_arr :=array(
        select game_logs_table  from slot_18.game_log_table_info 
        where  
             date(to_timestamp(start_time)) <= CURRENT_DATE-offday  and  date(to_timestamp(end_time)) >= CURRENT_DATE-offday
        or ( date(to_timestamp(start_time)) <= CURRENT_DATE-offday  and  end_time=0)
    );
    -- 从索引表拿到的表名去查数据
    foreach tbl IN ARRAY table_arr  LOOP
        -- 日期转字符串,2017-10-11 转成 20171011
        EXECUTE 'select to_char(now()- interval '' '|| offday ||' day'',''yyyymmdd'')' into day_num;
        -- 统计条数
        EXECUTE 'select all_bonus,all_bets,jp_contri,jackpot_bonus  from slot_18.' || tbl || ' where date=' || day_num into total;
        income := income + income;
        bonus := bonus + bonus;
        jp__contri := jp__contri + jp__contri;
        jp_bonus:= jp_bonus +jp_bonus;
        --  打印调试
        raise notice 'select count(*) as t  from slot_18.% where date= %' , tbl,  day_num ;
    END LOOP;
    --  打印调试
    raise notice ' 日期 % 收支 % 奖金 % jp奖金 % jp贡献 % ' , day_num,  income, bonus, jp_bonus, jp__contri;
    RETURN num;  
END;  
$BODY$  
  LANGUAGE 'plpgsql' VOLATILE;  

 ```